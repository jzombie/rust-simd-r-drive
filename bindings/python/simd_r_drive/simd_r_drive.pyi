from typing import Optional, IO

class EntryHandle:
    def as_memoryview(self) -> memoryview: ...
    def __len__(self) -> int: ...

class EntryStream:
    def read(self, size: int) -> bytes: ...
    def __iter__(self) -> EntryStream: ...
    def __next__(self) -> bytes: ...

class DataStore:
    def __init__(self, path: str) -> None: ...
    def write(self, key: bytes, data: bytes) -> None: ...
    def batch_write(self, items: list[tuple[bytes, bytes]]) -> None: ...
    def write_stream(self, key: bytes, reader: IO[bytes]) -> None: ...
    def read(self, key: bytes) -> Optional[bytes]: ...
    def read_entry(self, key: bytes) -> Optional[EntryHandle]: ...
    def read_stream(self, key: bytes) -> Optional[EntryStream]: ...
    def delete(self, key: bytes) -> None: ...
    def exists(self, key: bytes) -> bool: ...
